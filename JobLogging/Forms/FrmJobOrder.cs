using System;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.Data.Linq;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.DXErrorProvider;
using DevExpress.XtraGrid.Views.Grid;
using JobLogging.JobLoggingModel;

namespace JobLogging.Forms
{
    public partial class FrmJobOrder : XtraForm
    {
        public JobLoggingModelContainer Context { get; set; }
        int _focusedRowHandle=-1;

        public FrmJobOrder()
        {
            InitializeComponent();

            dateEdit_StaffOut.DateTime = DateTime.Today;

            _InitDataBind();
            entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
        }
        private void _InitDataBind()
        {
            Context = new JobLoggingModelContainer();

            Context.Users.Where(u => u.IsActivate && u.IsEngineer == true).Load();
            userBindingSource.DataSource = Context.Users.Local.ToBindingList(); 
            userBindingSource.Sort = "Sort desc";

            StaffOutCountDataBind();
        }

        private void FrmJobOrder_Load(object sender, EventArgs e)
        {
            InitUserRelated();
        }

        private void InitUserRelated()
        {
            bBtnDeleteJobOrder.Enabled = GlobalParams.HasPermission("删除派工");
            btnNoDispatch.Enabled = GlobalParams.HasPermission("派工分配");
        }

        // This event is generated by Data Source Configuration Wizard
        private void entityInstantFeedbackSource1_GetQueryable(object sender,
                                                               GetQueryableEventArgs e)
        {
            var c = new JobLoggingModelContainer();
            e.QueryableSource = c.JobOrders.AsNoTracking();
            e.Tag = c;
        }

        // This event is generated by Data Source Configuration Wizard
        private void entityInstantFeedbackSource1_DismissQueryable(object sender,
                                                                   GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((JobLoggingModelContainer)e.Tag).Dispose();
        }

        private void gridView1_CustomDrawRowIndicator(object sender, RowIndicatorCustomDrawEventArgs e)
        {
            if (e.Info.IsRowIndicator && e.RowHandle >= 0)
            {
                e.Info.DisplayText = (e.RowHandle + 1).ToString();
                //this.gridView1.IndicatorWidth = Convert.ToInt32(e.Info.DisplayText.Length * e.Info.Appearance.Font.SizeInPoints);
            }
        }

        private void gridView1_AsyncCompleted(object sender, EventArgs e)
        {
            //if (jobOrderBindingSource.Current != null && Context.Entry((JobOrder)jobOrderBindingSource.Current).State != EntityState.Added)
            //{
                gridView1.FocusedRowHandle = _focusedRowHandle;
            //}
            gridView1.SetRowExpanded(-1, true);

            gridView1.BestFitColumns();
            gridView1.Columns["Date"].Width = gridView1.CalcColumnBestWidth(gridView1.Columns["Date"]) + 5;
            gridView1.Columns["Appointment"].Width = gridView1.CalcColumnBestWidth(gridView1.Columns["Appointment"]) + 5;
            gridView1.Columns["Staffs"].Width = gridView1.CalcColumnBestWidth(gridView1.Columns["Staffs"]) + 5;

        }

        private void jobOrderBindingSource_AddingNew(object sender, AddingNewEventArgs e)
        {
            var jobOrder = new JobOrder { Date = DateTime.Today, CreateBy = GlobalParams.CurrentLoginUser.Name, CreateDate = DateTime.Now };
            Context.JobOrders.Local.Add(jobOrder);
            e.NewObject = jobOrder;
        }

        private void btnSaveJobOrder_Click(object sender, EventArgs e)
        {
            if (!dxValidationProvider1.Validate())
            {
                return;
            }
            jobOrderBindingSource.EndEdit();
            var entry = Context.Entry(jobOrderBindingSource.Current);
            if (entry.State != EntityState.Unchanged)
            {
                if (entry.State == EntityState.Detached)
                {
                    var entity = Context.JobOrders.Attach((JobOrder)entry.Entity);
                    if (entity.ID == 0)
                    {
                        entry.State = EntityState.Added;
                    }
                }
                Context.SaveChanges();
                //_focusedRowHandle = gridView1.FocusedRowHandle;
                gridView1.SelectRow(-1);
                gridView1.FocusedRowHandle = -1;
                entityInstantFeedbackSource1.Refresh();
                StaffOutCountDataBind();
                //entityServerModeSource1.Reload();
                alertControl1.Show(this, "提示", "数据已保存!");
                jobOrderBindingSource.RemoveCurrent();
            }
        }

        private void btnAddJobOrder_Click(object sender, EventArgs e)
        {
            //var job = new JobOrder {Date = DateTime.Now, CreateDate = DateTime.Now};
            //var t = (JobOrder)jobOrderBindingSource.AddNew();
            //t.Date = DateTime.Now;
            //t.CreateDate = DateTime.Now;
            if (jobOrderBindingSource.Current != null)
            {
                if (!dxValidationProvider1.Validate())
                {
                    return;
                }
                btnSaveJobOrder.PerformClick();
            }

            jobOrderBindingSource.AddNew();

            //StaffsTextEdit.ShowPopup();
            //ServiceTagTextEdit.Focus();
            ContactTextEdit.Focus();
        }

        private void btnGridViewRefresh_ItemClick(object sender, ItemClickEventArgs e)
        {
            _InitDataBind();
            //_focusedRowHandle = gridView1.FocusedRowHandle;
            gridView1.FocusedRowHandle = -1;
            entityInstantFeedbackSource1.Refresh();
            //userBindingSource.DataSource = null;
            //StaffsTextEdit.Refresh();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            if (jobOrderBindingSource.Current == null)
            {
                return;
            }
            var entry = Context.Entry(jobOrderBindingSource.Current);
            if (entry.State == EntityState.Added)
            {
                entry.State = EntityState.Detached;
            }
            if (entry.State == EntityState.Modified)
            {
                entry.Reload();
            }
            jobOrderBindingSource.CancelEdit();
            if (jobOrderBindingSource.Current != null) 
            {
            	 jobOrderBindingSource.RemoveCurrent();
            }
            	
        }

        private void bBtnDeleteJobOrder_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (gridView1.IsGroupRow(gridView1.FocusedRowHandle))
            {
                XtraMessageBox.Show("请选择要删除的记录");
                return;
            }
            if (XtraMessageBox.Show("确定要删除选择的记录？", "提示", MessageBoxButtons.OKCancel) == DialogResult.Cancel)
            {
                return;
            }
            if (gridView1.GetSelectedRows().Count() > 1)
            {
                var sbID = new StringBuilder();
                foreach (var id in gridView1.GetSelectedRows())
                {
                    sbID.AppendFormat("{0},", gridView1.GetRowCellValue(id, "ID"));
                }
                string sql = string.Format("delete JobOrders where ID in ({0})", sbID.Remove(sbID.Length - 1, 1));
                Context.Database.ExecuteSqlCommand(sql);
            }
            else
            {
                //jobOrderBindingSource.RemoveCurrent();
                Context.JobOrders.Local.Remove((JobOrder)jobOrderBindingSource.Current);
                Context.SaveChanges();
            }
            gridView1.FocusedRowHandle = -1;
            entityInstantFeedbackSource1.Refresh();
            alertControl1.Show(this, "提示", "记录已删除！");

        }

        private void dxValidationProvider1_ValidationFailed(object sender,
                                                            ValidationFailedEventArgs e)
        {
            e.InvalidControl.Focus();
        }

        private void StaffOutCountDataBind()
        {
            if (Context == null) return;
            lbStaffOut.DataSource = Context.Users.Local.Where(u => u.IsActivate && u.IsEngineer == true).OrderByDescending(u => u.Sort).Select(t => new
                     {
                         t.ID,
                         Staff = t.Name + " （" + Context.JobOrders.Count(j => j.Staffs != null && j.Staffs.Contains(t.Name) && j.Date == dateEdit_StaffOut.DateTime) + "）",
                         imageIndex = t.IsDuty == true ? 0 : -1
                     }).ToList();
            //var userName = Context.Users.Where(u => u.IsDuty == true).Select(u => u.Name).SingleOrDefault();
            //if (!string.IsNullOrEmpty(userName))
            //{
            //    ((ImageListBoxItem) lbStaffOut.image(lbStaffOut.FindString(userName))).ImageIndex = 0;
            //}

            btnNoDispatch.Text = string.Format("未派工（{0}）",
                Context.JobOrders.Count(j => j.Staffs == null || j.Staffs == ""));
        }

        private void bBtnShowFindPanel_ItemClick(object sender, ItemClickEventArgs e)
        {
            gridView1.ShowFindPanel();
        }

        private void btnNoDispatch_Click(object sender, EventArgs e)
        {
            if (new frmShowNoDispatch().ShowDialog() == DialogResult.OK)
            {
                bbtnGridViewRefresh.PerformClick();
            }
        }

        private void lbStaffOut_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (!GlobalParams.HasPermission("设置值班"))
                return;
            int index = lbStaffOut.IndexFromPoint(e.Location);

            if (index != ListBox.NoMatches)
            {
                var query = Context.Users.Local.Where(u => u.IsDuty == true);
                foreach (var user in query)
                {
                    user.IsDuty = false;
                }
                Context.Users.Find(lbStaffOut.SelectedValue).IsDuty = true;
                Context.SaveChanges();
                StaffOutCountDataBind();
                lbStaffOut.SetSelected(index, true);
            }

        }

        private void dateEdit_StaffOut_EditValueChanged(object sender, EventArgs e)
        {
            StaffOutCountDataBind();
        }

        private void FrmJobOrder_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (Context.ChangeTracker.Entries<JobOrder>().Any(t => t.State != EntityState.Unchanged))
            {
                var r = XtraMessageBox.Show("派工记录有未保存的修改，是否立即保存？", "提示", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);
                switch (r)
                {
                    case System.Windows.Forms.DialogResult.Yes:
                        Context.SaveChanges();
                        break;
                    case System.Windows.Forms.DialogResult.Cancel:
                        e.Cancel = true;
                        break;
                }
            }

        }

        private void AppointmentDateEdit_ParseEditValue(object sender, DevExpress.XtraEditors.Controls.ConvertEditValueEventArgs e)
        {
            if (e.Value != null && e.Value.ToString() == String.Empty)
                e.Value = null;
        }

        private void AppointmentDateEdit_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Delete)
            {
                AppointmentDateEdit.EditValue = null;
                e.Handled = true;
            }
        }

        private void IDSpinEdit_TextChanged(object sender, EventArgs e)
        {

        }

        private void IDSpinEdit_EditValueChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(IDSpinEdit.Text))
            {
                foreach (var control in dataLayoutControl1.Controls)
                {
                    var t = control as BaseEdit;
                    if (t != null) t.Enabled = false;
                }
            }
            else
            {
                foreach (var control in dataLayoutControl1.Controls)
                {
                    var t = control as BaseEdit;
                    if (t != null && !t.Properties.ReadOnly) t.Enabled = true;
                }
            }
        }

        private void bBtnAddJobOrder_ItemClick(object sender, ItemClickEventArgs e)
        {
            btnAddJobOrder.PerformClick();
        }

        private void bBtnSaveJobOrder_ItemClick(object sender, ItemClickEventArgs e)
        {
            btnSaveJobOrder.PerformClick();
        }

        private void bBtnCancel_ItemClick(object sender, ItemClickEventArgs e)
        {
            btnCancel.PerformClick();
        }

        private void gridView1_RowClick(object sender, RowClickEventArgs e)
        {
            //判断修改派工记录权限
            if (!GlobalParams.CurrentLoginUser.Role.Permissions.Any(p => p.Name == "修改派工"))
            {
                return;
            }

            if (jobOrderBindingSource.Current != null &&
                (Context.Entry(jobOrderBindingSource.Current).State == EntityState.Modified ||
                (Context.Entry(jobOrderBindingSource.Current).State == EntityState.Added)))
            {
                if (XtraMessageBox.Show("当前数据未保存，是否保存或取消修改？", "提示", MessageBoxButtons.OKCancel) ==
                    DialogResult.OK)
                {
                    if (!dxValidationProvider1.Validate())
                    {
                        gridView1.FocusedRowHandle = _focusedRowHandle;
                        return;
                    }
                    _focusedRowHandle = e.RowHandle;
                    btnSaveJobOrder.PerformClick();
                }
                else
                {
                    btnCancel.PerformClick();
                }
            }
            var id = gridView1.GetRowCellValue(e.RowHandle, "ID");
            if (id != null)
            {
                jobOrderBindingSource.DataSource = Context.JobOrders.Find(id);
                dxValidationProvider1.Validate();
            }

            _focusedRowHandle = e.RowHandle;
           
        }
    }
}