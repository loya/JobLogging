using System;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraBars.Alerter;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using JobLogging.JobLoggingModel;

namespace JobLogging.Forms
{
    public partial class frmUsers : DevExpress.XtraEditors.XtraForm
    {
        bool _isRolePermissionChanged;
        private AlertInfo _alertInfo;
        private JobLoggingModelContainer _context;

        public frmUsers()
        {
            InitializeComponent();
            _alertInfo = new AlertInfo("提示：", "数据已保存！", sharedImageCollection1.ImageSource.Images[0]);

            this.FormClosed += (sender, args) => _context.Dispose();
            // This line of code is generated by Data Source Configuration Wizard
            //GlobalParams.modelContainer.Staffs.Load();
            //GlobalParams.modelContainer.Roles.Load();roleBindingSource.DataSource = GlobalParams.modelContainer.Roles;
            InitDataBind();
        }

        private void InitDataBind()
        {
            _context = new JobLoggingModelContainer();
            _context.Roles.Load();
            _context.Users.Load();
            _context.Permissions.Load();
            roleBindingSource.DataSource = _context.Roles.Local.ToBindingList();
            usersBindingSource.DataSource = _context.Users.Local.ToBindingList();
            tlPermission.DataSource = _context.Permissions.Local.ToBindingList();
            tlPermission.ExpandAll();
        }


        private void FrmStaff_Load(object sender, System.EventArgs e)
        {
            tlPermission.ExpandAll();
        }

        private void FrmStaff_FormClosing(object sender, FormClosingEventArgs e)
        {
            string message = "";
            if (_context.ChangeTracker.Entries<User>().Any(t => t.State != EntityState.Unchanged))
            {
                message = "员工管理有未保存的修改!\n\r";
            }
            if (_isRolePermissionChanged)
            {
                message = "角色的权限有未保存的修改!";
            }


            if (!string.IsNullOrEmpty(message))
            {
                var dialogResult = MessageBox.Show(message + "，选是立即保存并退出，选否放弃修改并退出！", "警告",
                                                   MessageBoxButtons.YesNoCancel);
                if (dialogResult == DialogResult.Yes)
                    if (this.Validate(false))
                    {
                        _context.SaveChanges();
                    }

                //if (dialogResult == DialogResult.No)
                //{
                //    _context.Refresh(System.Data.Objects.RefreshMode.StoreWins,
                //                                        _context.Users);
                //    _context.AcceptAllChanges();
                //}


                if (dialogResult == DialogResult.Cancel)
                    e.Cancel = true;
            }
        }

        private void gridView1_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            var name = gridView1.GetRowCellValue(e.RowHandle, "Name");

            if (name == null)
            {
                e.ErrorText = "姓名不允许为空!";
                e.Valid = false;

            }
            else
            {
                var strName = name.ToString();
                var id = Convert.ToInt32(gridView1.GetRowCellValue(e.RowHandle, "ID"));
                if (_context.Users.Count(t => t.Name == strName && t.ID != id) > 0)
                {
                    e.ErrorText = "该姓名已存在,请更正!";
                    e.Valid = false;
                }
            }


            if (Convert.ToInt32(gridView1.GetRowCellValue(e.RowHandle, "RoleID")) == 0)
            {
                e.ErrorText = "角色不能为空!";
                e.Valid = false;
            }


        }

        private void gridView1_ValidatingEditor(object sender, BaseContainerValidateEditorEventArgs e)
        {
            if (gridView1.FocusedColumn.FieldName == "Name")
            {
                var name = e.Value.ToString();
                if (string.IsNullOrWhiteSpace(name))
                {
                    e.ErrorText = "姓名不允许为空!";
                    e.Valid = false;
                }
                else
                {
                    var id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
                    if (_context.Users.Count(t => t.Name == name && t.ID != id) > 0)
                    {
                        e.ErrorText = "该姓名已存在,请更正!";
                        e.Valid = false;
                    }
                }
            }
        }

        private void gridView1_RowUpdated(object sender, DevExpress.XtraGrid.Views.Base.RowObjectEventArgs e)
        {
            try
            {

                _context.SaveChanges();
                alertControl1.Show(this, _alertInfo);
            }
            catch (Exception ex)
            {

                XtraMessageBox.Show(ex.InnerException != null ? ex.InnerException.Message : ex.Message);

            }

        }

        private void gridControl1_EmbeddedNavigator_ButtonClick(object sender, DevExpress.XtraEditors.NavigatorButtonClickEventArgs e)
        {
            switch (e.Button.ButtonType)
            {
                case DevExpress.XtraEditors.NavigatorButtonType.Custom:

                    break;
            }
        }

        #region treelist event

        private void tlPermission_AfterCheckNode(object sender, NodeEventArgs e)
        {
            //    if (e.Node == null) return;
            //    DataRowView rov = tlPermission.GetDataRecordByNode(e.Node) as DataRowView;
            //    if (e.Node.CheckState == CheckState.Indeterminate)
            //    {
            //        e.Node.CheckState = CheckState.Checked;
            //    }
            //    if (e.Node.CheckState == CheckState.Checked)
            //    {
            //        if (e.Node.HasChildren)
            //        {
            //            CheckNode(e.Node);
            //        }
            //        ValidParentIsChecked(e.Node);
            //    }
            //    else if (e.Node.CheckState == CheckState.Unchecked)
            //    {
            //        if (e.Node.HasChildren)
            //        {
            //            ClearNode(e.Node);
            //        }
            //        //从根节点往下 查询 是否有打钩的子节点，如果有那么 父节点的 半选状态不变否则变为 不选择状态
            //        ValidParentNodeIsCanleSel(e.Node);
            //    }

            var role = lbRole.SelectedItem as Role;
            //var role = (Role)roleBindingSource.Current;
            if (role == null)
            {
                e.Node.Checked = !e.Node.Checked;
                XtraMessageBox.Show("请选择角色!");
                return;
            }
            if (e.Node.Checked)
            {
                role.Permissions.Add((Permission)tlPermission.GetDataRecordByNode(e.Node));
            }
            else
                role.Permissions.Remove((Permission)tlPermission.GetDataRecordByNode(e.Node));
            _isRolePermissionChanged = true;
        }

        private void CheckNode(TreeListNode node)
        {
            foreach (TreeListNode cnode in node.Nodes)
            {
                if (cnode != null)
                {
                    cnode.CheckState = CheckState.Checked;
                }
                if (cnode.HasChildren)
                {
                    CheckNode(cnode);
                }
            }
        }

        private void ClearNode(TreeListNode node)
        {
            foreach (TreeListNode cnode in node.Nodes)
            {
                if (cnode != null)
                {
                    cnode.CheckState = CheckState.Unchecked;
                }
                if (cnode.HasChildren)
                {
                    ClearNode(cnode);
                }
            }
        }

        private void ValidParentIsChecked(TreeListNode node)
        {
            if (node.ParentNode != null)
            {
                if (node.ParentNode.CheckState != CheckState.Checked)
                    node.ParentNode.CheckState = CheckState.Indeterminate;
                ValidParentIsChecked(node.ParentNode);
            }
        }

        private void ValidParentNodeIsCanleSel(DevExpress.XtraTreeList.Nodes.TreeListNode node)
        {
            bool isSel = false;
            if (node.ParentNode != null)
            {
                if (node.ParentNode.CheckState == CheckState.Indeterminate)
                {//如果父节点的 状态为 半选 状态 这 更具父节点 判断子节点是否打钩
                    isSel = ValidIsHasCheckChildNode(node.ParentNode);
                    if (isSel == false)
                    {//如果所有的 子节点 都没有 “选中”那么 父节点的状态 变为 非选中状态
                        node.ParentNode.CheckState = CheckState.Unchecked;
                    }
                }
                ValidParentNodeIsCanleSel(node.ParentNode);
            }
        }

        /// <summary>
        /// 判断 子节点 是否 有 状态为 “选中”状态 
        /// true 表示有 false 表示为 没有
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        private bool ValidIsHasCheckChildNode(DevExpress.XtraTreeList.Nodes.TreeListNode node)
        {
            bool isCheck = false;
            foreach (DevExpress.XtraTreeList.Nodes.TreeListNode cnode in node.Nodes)
            {
                if (cnode != null)
                {
                    if (cnode.CheckState == CheckState.Checked)
                    {
                        isCheck = true;
                        return isCheck;
                    }
                }
                if (cnode.HasChildren)
                {
                    isCheck = ValidIsHasCheckChildNode(cnode);
                    if (isCheck == true)
                    {
                        return isCheck;
                    }
                }
            }
            return isCheck;
        }

        #endregion

        private void btnSavePermission_Click(object sender, EventArgs e)
        {
            //var role = lbRole.SelectedItem as Role;
            //if (role == null)
            //{
            //    XtraMessageBox.Show("未选择角色！");
            //    return;
            //}
            //role.Permissions.Clear();
            //foreach (var node in tlPermission.GetAllCheckedNodes())
            //{
            //    role.Permissions.Add((Permission)tlPermission.GetDataRecordByNode(node));

            //}

            _context.SaveChanges();
            _isRolePermissionChanged = false;
            alertControl1.Show(this, _alertInfo);
        }

        private void btnCancelPermission_Click(object sender, EventArgs e)
        {
            //todo 取消权限修改

            InitDataBind();
            InitTreeListPermission();
        }

        private void lbRole_SelectedIndexChanged(object sender, EventArgs e)
        {
            InitTreeListPermission();
        }

        private void InitTreeListPermission()
        {
            var role = lbRole.SelectedItem as Role;

            if (role == null)
            {
                return;
            }
            tlPermission.UncheckAll();

            foreach (var permission in role.Permissions)
            {
                tlPermission.FindNodeByKeyID(permission.ID).CheckState = CheckState.Checked;
            }
        }

        private void lbRole_Enter(object sender, EventArgs e)
        {
            lbRole.SelectionMode = SelectionMode.One;
        }
        private void usersBindingSource_AddingNew(object sender, System.ComponentModel.AddingNewEventArgs e)
        {

            //var user = new User { Password = "", Skin = "Camacel", IsActivate = true, IsEngineer = true, Sort = 0 };
            //e.NewObject = user;
        }

        private void btnAddRole_Click(object sender, EventArgs e)
        {
            var roleName = Microsoft.VisualBasic.Interaction.InputBox("请输入角色名称:", "新增角色");
            if (!string.IsNullOrWhiteSpace(roleName))
            {
                if (_context.Roles.Count(r => r.Name == roleName) > 0)
                {
                    XtraMessageBox.Show("新增失败,该角色名称已存在!");
                    return;
                }
                _context.Roles.Add(new Role { Name = roleName });
                _context.SaveChanges();
                alertControl1.Show(this, _alertInfo);
            }
        }

        private void btnDeleteRole_Click(object sender, EventArgs e)
        {
            var role = lbRole.SelectedItem as Role;
            if (role == null)
            {
                XtraMessageBox.Show("请选择要删除的角色!");
                return;
            }

            if (role.Users.Count > 0)
            {
                XtraMessageBox.Show("该角色已被用户引用,不能删除!");
                return;
            } if (XtraMessageBox.Show("是否删除选择的角色?", "提示", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                _context.Roles.Remove(role);
                _context.SaveChanges();
                alertControl1.Show(this, "提示", "角色已删除");
            }
        }

        private void btnEditRole_Click(object sender, EventArgs e)
        {
            var role = lbRole.SelectedItem as Role;
            if (role == null)
            {
                XtraMessageBox.Show("请选择要修改的角色!");
                return;
            }
            var roleName = Microsoft.VisualBasic.Interaction.InputBox("请输入角色名称:", "新增角色");
            if (!string.IsNullOrWhiteSpace(roleName))
            {
                if (_context.Roles.Count(r => r.ID != role.ID && r.Name == roleName) > 0)
                {
                    XtraMessageBox.Show("修改失败,该角色名称已存在!");
                    return;
                }
                role.Name = roleName;
                _context.SaveChanges();
                alertControl1.Show(this, _alertInfo);
            }
        }

        private void barBtnAddRole_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            btnAddRole.PerformClick();
        }

        private void btnDeleteRole_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            btnDeleteRole.PerformClick();
        }

        private void btnEditRole_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            btnEditRole.PerformClick();
        }

        private void tlPermission_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                var hitInfo = tlPermission.CalcHitInfo(new Point(e.X, e.Y));
                if (hitInfo.HitInfoType == HitInfoType.Cell)
                {
                    tlPermission.SetFocusedNode(hitInfo.Node);
                    popupMenu1.ShowPopup(Control.MousePosition);
                }
            }
        }

        private void bBtnAddPermission_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            new frmAddPermission(_context, (Permission)tlPermission.GetDataRecordByNode(tlPermission.FocusedNode)).ShowDialog();
            tlPermission.RefreshDataSource();
        }

        private void bBtnDeletePermission_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (XtraMessageBox.Show("是否删除当前的权限？", "提示", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                var permission = (Permission)tlPermission.GetDataRecordByNode(tlPermission.FocusedNode);
                foreach (var role in permission.Roles)
                {
                    role.Permissions.Remove(permission);
                }
                RemovePermission(permission);
                _context.SaveChanges();
            }
        }
        private void RemovePermission(Permission permission)
        {
            foreach (var childPermission in permission.ChildPermissions.ToList())
            {
                RemovePermission(childPermission);
                _context.Permissions.Remove(childPermission);
            }
            _context.Permissions.Remove(permission);
        }

        private void bBtnEditPermission_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            new frmAddPermission(_context, (Permission)tlPermission.GetDataRecordByNode(tlPermission.FocusedNode), true).ShowDialog();
            tlPermission.RefreshDataSource();
        }

        private void gridView1_InitNewRow(object sender, DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs e)
        {
            gridView1.SetRowCellValue(e.RowHandle, colIsActivate, true);
            gridView1.SetRowCellValue(e.RowHandle, colIsEngineer, true);
            gridView1.SetRowCellValue(e.RowHandle, colSkin, "Camacel");
            gridView1.SetRowCellValue(e.RowHandle, colSort, 0);
            gridView1.SetRowCellValue(e.RowHandle, colPassword, "");
        }

        private void FrmUsers_FormClosed(object sender, FormClosedEventArgs e)
        {
            _context.Dispose();
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (XtraMessageBox.Show("确定要重置角色和权限数据吗？", "警告", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Cancel)
            {
                return;
            }
            new Common.Database().ReInitRoleAndPermission();
            XtraMessageBox.Show("角色和权限数据已重新生成,本窗口将重新打开！");
            var MdiParent = this.MdiParent;
            Close();

            ((MainForm)MdiParent).OpenMdiForm<frmUsers>("用户角色管理", "系统设置");
        }

        private void gridControl1_SizeChanged(object sender, EventArgs e)
        {
            gridView1.BestFitColumns();
        }
    }
}
