using System;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraEditors;

namespace JobLogging.Forms
{
    public partial class FrmJobLogging : DevExpress.XtraEditors.XtraForm
    {
        public JobloggingModel.JobloggingModelContainer Context { get; set; }

        public FrmJobLogging()
        {
            InitializeComponent();

            Context = GlobalParams.modelContainer;
            userBindingSource.DataSource = Context.Users.OrderByDescending(t => t.Sort);
            jobOrderBindingSource.DataSource = Context.JobOrders;
            this.entityInstantFeedbackSource1.GetQueryable += entityInstantFeedbackSource1_GetQueryable;
            //this.entityInstantFeedbackSource1.DismissQueryable += entityInstantFeedbackSource1_DismissQueryable;
        }

        private void gridView1_CustomDrawRowIndicator(object sender, DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs e)
        {
            if (e.Info.IsRowIndicator)
            {
                if (e.RowHandle >= 0)
                {
                    e.Info.DisplayText = (e.RowHandle + 1).ToString();
                }
            }
        }

        private void FrmJobLogging_Load(object sender, System.EventArgs e)
        {
            gridView1.ExpandGroupRow(0);gridView1.SetRowExpanded(-1, true);
            gridView1.SetRowExpanded(-2, true);}

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_GetQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {
            e.QueryableSource = Context.JobOrders;
        }

        // This event is generated by Data Source Configuration Wizard
        void entityInstantFeedbackSource1_DismissQueryable(object sender, DevExpress.Data.Linq.GetQueryableEventArgs e)
        {

            // Dispose of the DataContext
            ((JobLogging.JobloggingModel.JobloggingModelContainer)e.Tag).Dispose();
        }

        private void simpleButton1_Click(object sender, System.EventArgs e)
        {
            if (!dxValidationProvider1.Validate())
            {
                return;
            }
            jobOrderBindingSource.EndEdit();
            Context.SaveChanges();
            gridControl1.RefreshDataSource();
        }

        private void dataNavigator1_ButtonClick(object sender, DevExpress.XtraEditors.NavigatorButtonClickEventArgs e)
        {
            //e.Handled = dxValidationProvider1.Validate();
            switch (e.Button.ButtonType)
            {
                case NavigatorButtonType.EndEdit:
                    if (Convert.ToInt32(IDSpinEdit.EditValue) != 0)
                    {
                        Context.SaveChanges();
                    }
                    break;
                case NavigatorButtonType.Append:
                    break;
            }

        }

        private void jobOrderBindingSource_CurrentChanged(object sender, EventArgs e)
        {
            var t = (JobloggingModel.JobOrder)jobOrderBindingSource.Current;

        }

        private void jobOrderBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
        }

        private void jobOrderBindingSource_AddingNew(object sender, System.ComponentModel.AddingNewEventArgs e)
        {

        }

        private void jobOrderBindingSource_PositionChanged(object sender, EventArgs e)
        {


        }

        private void dxValidationProvider1_ValidationFailed(object sender, DevExpress.XtraEditors.DXErrorProvider.ValidationFailedEventArgs e)
        {
            e.InvalidControl.Focus();
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {var t = (JobloggingModel.JobOrder)jobOrderBindingSource.AddNew();
            t.Date = DateTime.Now;
            t.CreateDate = DateTime.Now;
        }

        private void simpleButton3_Click(object sender, EventArgs e)
        {
            jobOrderBindingSource.CancelEdit();
        }

        private void gridView1_RowClick(object sender, DevExpress.XtraGrid.Views.Grid.RowClickEventArgs e)
        {
            //var id = Convert.ToInt32(gridView1.GetRowCellValue(e.RowHandle, "ID"));
            //jobOrderBindingSource.DataSource = Context.JobOrders.Where(t => t.ID == id);
        }

        private void gridView1_RowCellClick(object sender, DevExpress.XtraGrid.Views.Grid.RowCellClickEventArgs e)
        {
            var id = Convert.ToInt32(gridView1.GetRowCellValue(e.RowHandle, "ID"));
            jobOrderBindingSource.DataSource = Context.JobOrders.Where(t => t.ID == id);
           
        }
    }
}